{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"easy GMM-HMM GMM-HMM (Hidden markov model with Gaussian mixture emissions) for sound recognition and other uses read the docs train takes in the directory containing training data as raw wavfiles within folders named according to label and extracts MFCC feature vectors from them, accepts a configuration for each in terms of number of states for HMM and number of mixtures in the Gaussian Model and then trains a set of GMMHMMs, one for each label. Params: -data_path: Path to the training wav files. Each folder in this path is a label and must NOT be empty. -model_path: Path to store the generated pickle files in. from easy_gmmhmm.train import train model_path = \"models\" data_path = \"data\" train(data_path, model_path) test from easy_gmmhmm import predict_label import time start = time.time() wav_file = \"test.wav\" model_path = \"models\" predicted, probs = predict_label(wav_file, model_path) print(\"PREDICTED: %s\" % predicted[0]) print(\"scores: {}\".format(probs)) print(\"elapsed\", time.time() - start)","title":"Home"},{"location":"#easy-gmm-hmm","text":"GMM-HMM (Hidden markov model with Gaussian mixture emissions) for sound recognition and other uses read the docs","title":"easy GMM-HMM"},{"location":"#train","text":"takes in the directory containing training data as raw wavfiles within folders named according to label and extracts MFCC feature vectors from them, accepts a configuration for each in terms of number of states for HMM and number of mixtures in the Gaussian Model and then trains a set of GMMHMMs, one for each label. Params: -data_path: Path to the training wav files. Each folder in this path is a label and must NOT be empty. -model_path: Path to store the generated pickle files in. from easy_gmmhmm.train import train model_path = \"models\" data_path = \"data\" train(data_path, model_path)","title":"train"},{"location":"#test","text":"from easy_gmmhmm import predict_label import time start = time.time() wav_file = \"test.wav\" model_path = \"models\" predicted, probs = predict_label(wav_file, model_path) print(\"PREDICTED: %s\" % predicted[0]) print(\"scores: {}\".format(probs)) print(\"elapsed\", time.time() - start)","title":"test"},{"location":"easy_gmmhmm.models/","text":"Module easy_gmmhmm.models","title":"models"},{"location":"easy_gmmhmm.models/#module-easy_gmmhmmmodels","text":"","title":"Module easy_gmmhmm.models"},{"location":"easy_gmmhmm.train/","text":"Module easy_gmmhmm.train get_GMMs def get_GMMs(labels, trng_data=None, GMM_config=None, model_path='/home/user/PycharmProjects/gender_detection/easy_gmmhmm/models/gmmhmm.pkl', from_file=False) Utility function to train or load GMMHMMs based on entered configuration and training data. Returns a dictionary of trained GMMHMM objects. obtain_config def obtain_config(labels, file_path, from_file=False) Utility function to take in parameters to train individual GMMHMMs train def train(data_path, models_path='/home/user/PycharmProjects/gender_detection/easy_gmmhmm/models') Description: Function that takes in the directory containing training data as raw wavfiles within folders named according to label and extracts MFCC feature vectors from them, accepts a configuration for each in terms of number of states for HMM and number of mixtures in the Gaussian Model and then trains a set of GMMHMMs, one for each label. Params: * data_path (mandatory): Path to the training wav files. Each folder in this path is a label and must NOT be empty. * models (mandatory): Path to store the generated pickle files in. Return: A python dictionary of GMMHMMs that are trained, key values being labels extracted from folder names. wav2mfcc def wav2mfcc(labels, data_path, pickle_path='trng_data.pkl', from_file=False) Utility function to read wav files, convert them into MFCC vectors and store in a pickle file (Pickle file is useful in case you re-train on the same data changing hyperparameters)","title":"train"},{"location":"easy_gmmhmm.train/#module-easy_gmmhmmtrain","text":"","title":"Module easy_gmmhmm.train"},{"location":"easy_gmmhmm.train/#get95gmms","text":"def get_GMMs(labels, trng_data=None, GMM_config=None, model_path='/home/user/PycharmProjects/gender_detection/easy_gmmhmm/models/gmmhmm.pkl', from_file=False) Utility function to train or load GMMHMMs based on entered configuration and training data. Returns a dictionary of trained GMMHMM objects.","title":"get_GMMs"},{"location":"easy_gmmhmm.train/#obtain95config","text":"def obtain_config(labels, file_path, from_file=False) Utility function to take in parameters to train individual GMMHMMs","title":"obtain_config"},{"location":"easy_gmmhmm.train/#train","text":"def train(data_path, models_path='/home/user/PycharmProjects/gender_detection/easy_gmmhmm/models') Description: Function that takes in the directory containing training data as raw wavfiles within folders named according to label and extracts MFCC feature vectors from them, accepts a configuration for each in terms of number of states for HMM and number of mixtures in the Gaussian Model and then trains a set of GMMHMMs, one for each label. Params: * data_path (mandatory): Path to the training wav files. Each folder in this path is a label and must NOT be empty. * models (mandatory): Path to store the generated pickle files in. Return: A python dictionary of GMMHMMs that are trained, key values being labels extracted from folder names.","title":"train"},{"location":"easy_gmmhmm.train/#wav2mfcc","text":"def wav2mfcc(labels, data_path, pickle_path='trng_data.pkl', from_file=False) Utility function to read wav files, convert them into MFCC vectors and store in a pickle file (Pickle file is useful in case you re-train on the same data changing hyperparameters)","title":"wav2mfcc"}]}